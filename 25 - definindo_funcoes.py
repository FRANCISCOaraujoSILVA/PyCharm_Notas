"""
                                                DEFININDO FUN√á√ïES


- Pode ou n√£o receber entrada de dados, e pode ou n√£o retornar uma sa√≠da de dados
- Muito usado para processos repetitivos

Nota:
Se a fun√ß√£o criada realiza muitas tarefas, √© bom fazer uma verifica√ß√£o para que a fun√ß√£o seja simplificada.
Fa√ßa print(help(print())) para ver a documenta√ß√£o da fun√ß√£o 'print()' ou CTRL+botaoEsquerdo no nome da fun√ß√£o
"""

# Exemplo de utiliza√ß√£o de fun√ß√µes nativas (built-in)

cores = ['verde', 'amarela', 'azul', 'branco']
curso = ['Engenharia']

cores.append('roxo')  # Adicionamos a cor "roxo" ao final da LISTA
curso.append('Administra√ß√£o P√∫blica')
print('-----')

# utilizando a fun√ß√£o integrada (Built-in) do Python print()

print(cores)
print(curso)
print('-----')

# cores.clear()  Limpa a lista. Essa fun√ß√£o n√£o recebe dados de entrada
# print(cores)
print('-----')

# DRY - Don't Repeat Yourself (n√£o repita voc√™ mesmo). Express√£o muito usada na programa√ß√£o

"""
Em python, a forma geral para definir uma fun√ß√£o √©:
- Come√ßamos com a palavra reservada def, de definition

def nome_da_funcao(parametros_de_entrada):
    bloco_da_funcao
    
Obs.:
nome_da_funcao:
    - Sempre com letras min√∫sculas e separar com underline quando preciso
parametros_de_entrada: 
    - S√£o opcionais, se houver mais de um, separar por v√≠rgula
bloco_da_funcao: 
    - Tamb√©m chamado de corpo da fun√ß√£o, pode ou n√£o ter o retorno da fun√ß√£o

Abrimos o bloco de c√≥digo com os dois pontos ":"
"""

# Definindo a primeira fun√ß√£o


def diz_oi():
    print('Ol√° usu√°rio!')


"""
- Essa fun√ß√£o "diz_oi" n√£o recebe par√¢metro de entrada
- Essa fun√ß√£o n√£o retorna nada, pois fizemos apenas a defini√ß√£o dela
- Podemos usar uma fun√ß√£o dentro de outra fun√ß√£o. Veja o "print", que est√° dentro da def. Ele tamb√©m √© uma fun√ß√£o üòâ
"""

# Para utilizar essa fun√ß√£o precisamos cham√°-la

diz_oi()
# Veja que nunca podemos esquecer de usar o par√™nteses ao executar uma fun√ß√£o. Lembrar tamb√©m que ele √© COLADO √† fun√ß√£o
print('-----')


def cantar_parabens():
    print('Parab√©ns para voc√™')
    print('Nesta data')
    print('Querida')
    print(' ')


# Chamando 3 vezes a mesma fun√ß√£o

cantar_parabens()
cantar_parabens()
cantar_parabens()
print('-----')


# Ou

for n in range(5):  # Executando 5 vezes. A posi√ß√£o √© n-1
    cantar_parabens()
print('-----')

# Tamb√©m podemos fazer isso, mas n√£o √© recomendado. Criando vari√°veis do tipo fun√ß√£o. Executamos a vari√°vel como fun√ß√£o

cantar = cantar_parabens  # Recebe a execu√ß√£o. Veja que n√£o temos o par√™nteses. Esse m√©todo N√ÉO √© comum
cantar()
